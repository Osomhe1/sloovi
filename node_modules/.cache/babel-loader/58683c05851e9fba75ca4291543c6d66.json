{"ast":null,"code":"const isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport const register = config => {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\nexport const registerValidSW = (swUrl, config) => {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n};\n\nconst checkValidServiceWorker = (swUrl, config) => {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n};\n\nexport const unregister = () => {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n};","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload"],"sources":["C:/Users/OSIOKE/Downloads/Sloovi/Sloovi/src/serviceWorker.js"],"sourcesContent":["const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport const register = (config) => {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n};\n\nexport const registerValidSW = (swUrl, config) => {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n};\n\nconst checkValidServiceWorker = (swUrl, config) => {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n};\n\nexport const unregister = () => {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}